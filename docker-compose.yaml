version: "3.8"

services:
  postgres:
    image: postgres:12
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASES: ${POSTGRES_KC_DB},${POSTGRES_KONG_DB}
      POSTGRES_PASSWORDS: ${POSTGRES_KC_PASSWORD},${POSTGRES_KONG_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./postgres/initdb.d:/docker-entrypoint-initdb.d
      - ./data/caspianx/var/lib/postgresql/data:/var/lib/postgresql/data


  kong:
    image: caspianx-kong:1.0.0
    build:
      context: ./kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: ${POSTGRES_HOST}
      KONG_PG_PORT: ${POSTGRES_PORT}
      KONG_PG_DATABASE: ${POSTGRES_KONG_DB}
      KONG_PG_USER: ${POSTGRES_KONG_DB}
      KONG_PG_PASSWORD: ${POSTGRES_KONG_PASSWORD}

      KONG_PROXY_ACCESS_LOG: /usr/local/kong/logs/access.log
      KONG_ADMIN_ACCESS_LOG: /usr/local/kong/logs/admin_access.log
      KONG_PROXY_ERROR_LOG: /usr/local/kong/logs/error.log
      KONG_ADMIN_ERROR_LOG: /usr/local/kong/logs/admin_access.log
      KONG_LOG_LEVEL: debug

      KONG_ADMIN_LISTEN: "0.0.0.0:${KONG_ADMIN_PORT}"
      KONG_PLUGINS: oidc
      KONG_SSL_CERT_KEY: /run/secrets/kong_ssl_cert_key
      KONG_SSL_CERT: /run/secrets/kong_ssl_cert
    ports:
      - ${KONG_ADMIN_PORT}:${KONG_ADMIN_PORT}
      - 80:${KONG_PORT}
    volumes:
      - ./kong/oidc-plugin/:/usr/local/share/lua/5.1/kong/plugins/oidc/
      - ./kong/lua-resty-openidc/openidc.lua:/usr/local/share/lua/5.1/resty/openidc.lua
    depends_on:
      - postgres
    secrets:
      - kong_ssl_cert_key
      - kong_ssl_cert

  keycloak:
    image: quay.io/keycloak/keycloak:17.0.0
    command: start-dev
    # image: caspianx-keycloak:1.0.0
    # build:
    #   context: ./keycloak
    environment:
      DB_VENDOR: postgres
      DB_ADDR: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      DB_DATABASE: ${POSTGRES_KC_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_KC_PASSWORD}
      KEYCLOAK_ADMIN: ${IAM_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${IAM_ADMIN_PASSWORD}
    ports:
      - ${KEYCLOAK_PORT}:${KEYCLOAK_PORT}
    volumes:
      - ./data/caspianx/var/lib/postgresql/data:/opt/keycloak/data
    depends_on:
      - postgres

  
  kong-configuration:
    image: caspianx-kong-configuration:1.0.0
    build:
      context: ./kong-configuration
    volumes:
      - ./kong-configuration:/kong-configuration
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      IAM_SERVICE: http://${KEYCLOAK_HOST}:${KEYCLOAK_PORT}
      IAM_ADMIN_USERNAME: ${IAM_ADMIN_USERNAME}
      IAM_ADMIN_PASSWORD: ${IAM_ADMIN_PASSWORD}
      IAM_ADMIN_CLIENT_ID: ${IAM_ADMIN_CLIENT_ID}
      OIDC_CLIENT_ID: dashboard
      KONG_API: http://${KONG_HOST}:${KONG_ADMIN_PORT}
      # DISCOVERY_URL: http://{realm}.kc.${ENVIRONMENT}.caspianx.com/realms/{realm}/.well-known/openid-configuration
      # DISCOVERY_URL: http://master.kc.development.caspianx.com:8080/realms/{realm}/.well-known/openid-configuration
      # since it is http, kong does not route outside of the container. we should send request to the internal keycloak service
      DISCOVERY_URL: http://keycloak:8080/realms/{realm}/.well-known/openid-configuration
      DASHBOARD_SERVICE_DOMAIN: dashboard
      MAIN_DOMAIN: caspianx.com

      USER_MANAGEMENT_SERVICE: user-management
      USER_MANAGEMENT_SERVICE_PORT: 8081
    depends_on:
      - kong

  user-management:
    image: caspianx-user-management:1.0.0
    build:
      context: ../caspianx-services/user-management
    volumes:
      - ../caspianx-services/user-management:/opt/app-root/user-management
    environment:
      PORT: 8081
    depends_on:
      - kong
      - keycloak

secrets:
  kong_ssl_cert_key:
    file: kong/cert/kong-default.key
  kong_ssl_cert:
    file: kong/cert/kong-default.crt